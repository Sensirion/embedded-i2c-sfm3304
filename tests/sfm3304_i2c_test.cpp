/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 1.1.2
 * Product:       sfm3304
 * Model-Version: 1.0.0
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "sfm3304_i2c.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

TEST_GROUP (SFM3304_Tests) {
    void setup() {
        sfm3304_init(0x2E);
    }
};

TEST (SFM3304_Tests, test_configure_averaging1) {
    int16_t local_error = 0;
    local_error = sfm3304_configure_averaging(2);
    CHECK_EQUAL_ZERO_TEXT(local_error, "configure_averaging");
}

TEST (SFM3304_Tests, test_read_product_identifier1) {
    int16_t local_error = 0;
    uint32_t product_identifier = 0;
    uint64_t serial_number = 0;
    local_error =
        sfm3304_read_product_identifier(&product_identifier, &serial_number);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_product_identifier");
    printf("product_identifier: %u ", product_identifier);
    printf("serial_number: %" PRIx64 "\n", serial_number);
}

TEST (SFM3304_Tests, test_read_scale_offset_unit1) {
    int16_t local_error = 0;
    int16_t flow_scale_factor = 0;
    int16_t flow_offset = 0;
    sfm3304_flow_unit_t flow_unit = {.value = 0u};
    local_error = sfm3304_read_scale_offset_unit(13827, &flow_scale_factor,
                                                 &flow_offset, &flow_unit);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_scale_offset_unit");
    printf("flow_scale_factor: %i ", flow_scale_factor);
    printf("flow_offset: %i ", flow_offset);
    printf("flow_unit: %02x\n", flow_unit.value);
}

TEST (SFM3304_Tests, test_enter_sleep1) {
    int16_t local_error = 0;
    local_error = sfm3304_enter_sleep();
    CHECK_EQUAL_ZERO_TEXT(local_error, "enter_sleep");
    local_error = sfm3304_exit_sleep();
    CHECK_EQUAL_ZERO_TEXT(local_error, "exit_sleep");
}

TEST (SFM3304_Tests, test_start_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t temperature = 0;
    sfm3304_status_word_t status_word = {.value = 0u};
    local_error = sfm3304_start_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_continuous_measurement");
    local_error =
        sfm3304_read_measurement_data_raw(&flow, &temperature, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data_raw");
    printf("flow: %i ", flow);
    printf("temperature: %i ", temperature);
    printf("status_word: %02x\n", status_word.value);
    local_error = sfm3304_read_measurement_flow_raw(&flow);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_flow_raw");
    printf("flow: %i\n", flow);
    local_error = sfm3304_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (SFM3304_Tests, test_start_continuous_measurement_with_filter1) {
    int16_t local_error = 0;
    int16_t flow = 0;
    int16_t temperature = 0;
    sfm3304_status_word_t status_word = {.value = 0u};
    local_error = sfm3304_start_continuous_measurement_with_filter(50961);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_continuous_measurement_with_filter");
    local_error =
        sfm3304_read_measurement_data_raw(&flow, &temperature, &status_word);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_data_raw");
    printf("flow: %i ", flow);
    printf("temperature: %i ", temperature);
    printf("status_word: %02x\n", status_word.value);
    local_error = sfm3304_read_measurement_flow_raw(&flow);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_flow_raw");
    printf("flow: %i\n", flow);
    local_error = sfm3304_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}
